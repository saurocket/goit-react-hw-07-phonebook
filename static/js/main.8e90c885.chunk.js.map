{"version":3,"sources":["Components/Header/Header.tsx","Components/From/Button.tsx","Components/From/Input.tsx","Components/From/From.tsx","redux/phoneSelectors/phoneSelectors.ts","Components/ContacstPage/Contacts.tsx","Components/ContacstPage/ContactsPage.tsx","redux/firlter.ts","redux/phoneReducer.ts","Components/MainPage.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","header","padding","spacing","Header","text","variant","clasess","Typography","className","component","gutterBottom","color","align","useStyle","root","margin","PrimaryButton","children","props","styles","Button","fullWidth","type","Input","forwardRef","ref","TextField","inputRef","display","flexDirection","marginLeft","marginRight","width","schema","yup","shape","name","matches","required","phone","Form","onChangeName","onChangePhone","onSubmitForm","onCheckContactList","classes","useForm","defaultValues","mode","resolver","yupResolver","register","handleSubmit","errors","formState","onSubmit","data","Swal","fire","id","Date","now","number","position","icon","title","showConfirmButton","timer","label","error","helperText","message","value","onChange","e","target","getContacts","state","contacts","items","getFilter","filter","filterContact","createSelector","item","toLowerCase","includes","maxWidth","contactsRender","filtredContacts","Contacts","onDeleteContact","useSelector","updateFilter","useMemo","List","length","map","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","ListItemSecondaryAction","IconButton","edge","aria-label","onClick","textAlign","ContactsPage","onChangeFilter","contactsFilter","arr","index","array","findIndex","a","CONTACTS_URL","initialState","actions","payload","getDataContact","dispatch","fetch","response","ok","Error","json","responseData","MainPage","useDispatch","getError","useState","setState","useEffect","find","method","headers","body","JSON","stringify","postContact","prevState","preState","deletePost","App","CssBaseline","Container","fixed","style","backgroundColor","minHeight","reducers","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e90c885.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme:Theme) => createStyles({\r\n    header: {\r\n        padding: theme.spacing(5)\r\n    }\r\n}))\r\n\r\ntype PropsTypes = {\r\n    text: string\r\n    variant?: 'h2' | 'h3'\r\n}\r\n\r\nexport const Header:React.FC<PropsTypes> = ({text,variant='h2'}) => {\r\n    const clasess = useStyles()\r\n    return (\r\n        <Typography\r\n            className={clasess.header}\r\n            variant={variant}\r\n            component={variant}\r\n            gutterBottom\r\n            color=\"primary\"\r\n            align=\"center\"\r\n        >\r\n            {text}\r\n        </Typography>\r\n    )\r\n}\r\n","import {Button, makeStyles} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\n\r\nconst useStyle = makeStyles((theme) => {\r\n    return {\r\n        root: {\r\n            margin: theme.spacing(3, 0 ,2)\r\n        }\r\n    }\r\n})\r\n\r\nexport const PrimaryButton = ({children, ...props}:any) => {\r\n    const styles = useStyle();\r\n    return <Button\r\n        className={styles.root}\r\n\r\n        fullWidth\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        {...props}\r\n    >\r\n        {children}\r\n    </Button>\r\n}","import {forwardRef} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport const Input = forwardRef((props:any, ref:any) => {\r\n\r\n    return (\r\n        <TextField\r\n            variant=\"outlined\"\r\n            margin='normal'\r\n            inputRef={ref}\r\n            fullWidth\r\n            {...props}\r\n        />\r\n    )\r\n\r\n\r\n})\r\n","import React from 'react'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport {PrimaryButton} from \"./Button\"\r\nimport * as yup from \"yup\"\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport {Input} from \"./Input\";\r\nimport {ContactType} from \"../MainPage\";\r\nimport Swal from \"sweetalert2\";\r\n\r\ntype PropsType = {\r\n    name: string,\r\n    phone: string,\r\n    onChangeName: (value: string) => void\r\n    onChangePhone: (value: string) => void\r\n    onSubmitForm: (data: ContactType) => void\r\n    onCheckContactList: (name: string) => undefined | any\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            '& > *': {\r\n                marginLeft: 'auto',\r\n                marginRight: 'auto',\r\n                margin: theme.spacing(1),\r\n                width: '50ch',\r\n            },\r\n        },\r\n\r\n    }),\r\n);\r\n\r\nconst schema = yup.object().shape({\r\n    name: yup\r\n        .string()\r\n        .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\")\r\n        .required(\"Имя - Обязательное поле\"),\r\n    phone: yup\r\n        .string()\r\n        .matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/, \"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\")\r\n        .required(\"Номер телефона - Обязательное поле\")\r\n})\r\n\r\n\r\nexport const Form: React.FC<PropsType> = ({name, phone, onChangeName, onChangePhone, onSubmitForm, onCheckContactList}) => {\r\n\r\n\r\n    const classes = useStyles();\r\n    const onSubmit = (data: { name: string, phone: string }) => {\r\n        const matchContact = onCheckContactList(name)\r\n        if (matchContact){\r\n            Swal.fire(`${name}`, \"<p>Уже есть в ваших контактах</p>\")\r\n            return\r\n        }\r\n        const id = 'id-' + Date.now()\r\n        onSubmitForm({id: id, number: data.phone, name: data.name})\r\n\r\n\r\n        Swal.fire({\r\n            position: 'top-end',\r\n            icon: 'success',\r\n            title: `${name} Добавлен(a) в ваши контакты `,\r\n            showConfirmButton: false,\r\n            timer: 1500\r\n        })\r\n        onChangeName('')\r\n        onChangePhone('')\r\n\r\n    }\r\n\r\n    const {register, handleSubmit, formState: {errors}} = useForm({\r\n        defaultValues: {name, phone},\r\n        mode: \"onBlur\",\r\n        resolver: yupResolver(schema)\r\n\r\n    })\r\n\r\n\r\n    return (\r\n        <form className={classes.root}  onSubmit={handleSubmit(onSubmit)}>\r\n            <Input\r\n                {...register('name')}\r\n                id=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                error={!!errors.name}\r\n                helperText={errors?.name?.message}\r\n                value={name}\r\n                onChange={(e: any) => onChangeName(e.target.value)}\r\n            />\r\n            <Input\r\n                {...register('phone')}\r\n                id=\"phone\"\r\n                type=\"text\"\r\n                label=\"Phone\"\r\n                error={!!errors.phone}\r\n                helperText={errors?.phone?.message}\r\n                value={phone}\r\n                onChange={(e: any) => onChangePhone(e.target.value)}\r\n            />\r\n            <PrimaryButton>Add contact</PrimaryButton>\r\n        </form>\r\n    );\r\n}\r\n","import {AppStateType} from \"../store\";\r\nimport { createSelector } from 'reselect';\r\n\r\n\r\nexport const getContacts =  (state:AppStateType) => {\r\n    return state.phone.contacts.items\r\n}\r\nexport const getFilter = (state:AppStateType) => {\r\n    return state.phone.contacts.filter\r\n}\r\n\r\n\r\nexport const filterContact = createSelector(\r\n    [getContacts, getFilter], (contacts, filter) => {\r\n        return contacts.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()))\r\n    }\r\n)\r\nexport const getError = (state:AppStateType) => {\r\n    return state.phone.error\r\n}","import React, {useMemo} from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {ContactType} from \"../MainPage\";\r\nimport {filterContact} from \"../../redux/phoneSelectors/phoneSelectors\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            maxWidth: 600,\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto'\r\n\r\n        },\r\n    }),\r\n);\r\n\r\ntype PropsTypes = {\r\n    filter: string\r\n    contacts: Array<ContactType>\r\n    onDeleteContact: (id: string | number) => void\r\n}\r\n\r\nconst contactsRender = (contacts:Array<ContactType>, filter:string,\r\n                        filtredContacts: Array<ContactType>):Array<ContactType> => {\r\n    if (filter) {\r\n        return filtredContacts\r\n    }\r\n    return contacts\r\n}\r\n\r\n\r\n\r\nexport const Contacts: React.FC<PropsTypes> = ({contacts, filter, onDeleteContact}) => {\r\n    const classes = useStyles();\r\n    const filtredContacts = useSelector((state:AppStateType) => filterContact(state))\r\n    // const contactsRender = (function (constants, filter) {\r\n    //     if (filter) {\r\n    //         return filtredContacts\r\n    //         // return contacts.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()))\r\n    //\r\n    //     }\r\n    //     return contacts\r\n    // })(contacts, filter)\r\n\r\n\r\n    const updateFilter = useMemo(()=>{\r\n        return contactsRender(contacts,filter, filtredContacts)\r\n    },[contacts,filter,filtredContacts])\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <List>\r\n                {contactsRender.length > 0 && updateFilter.map(item => <ListItem key={item.id}>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <AccountCircleIcon/>\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={item.name}\r\n                                secondary={item.number}\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n\r\n                                <IconButton\r\n                                    edge=\"end\"\r\n                                    aria-label=\"delete\"\r\n                                    onClick={() => onDeleteContact(item.id)}\r\n                                >\r\n                                    <DeleteIcon/>\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    )}\r\n            </List>\r\n        </div>\r\n    );\r\n}","import {Header} from \"../Header/Header\";\r\nimport React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport { Contacts } from \"./Contacts\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            textAlign: 'center',\r\n            '& > *': {\r\n                marginLeft: 'auto',\r\n                marginRight: 'auto',\r\n                margin: theme.spacing(1),\r\n                width: '50ch',\r\n            },\r\n        },\r\n\r\n    }),\r\n);\r\n\r\ntype PropsTypes = {\r\n    filter: string\r\n    onChangeFilter: (value:string) => void\r\n    contacts: any\r\n    onDeleteContact: (id: string | number) => void\r\n\r\n}\r\n\r\n\r\n\r\nexport const ContactsPage:React.FC<PropsTypes> = ({filter, onChangeFilter, contacts, onDeleteContact}) => {\r\n    const classes = useStyles();\r\n    return <>\r\n        <Header\r\n            text=\"Contacts\"\r\n            variant='h3'\r\n        />\r\n        <div className={classes.root}>\r\n            <TextField\r\n                id=\"filter\"\r\n                label=\"Find contacts by name\"\r\n                variant=\"outlined\"\r\n                value={filter}\r\n                onChange={(e)=> onChangeFilter(e.target.value)}\r\n            />\r\n        </div>\r\n        <Contacts\r\n            contacts={contacts}\r\n            filter={filter}\r\n            onDeleteContact={onDeleteContact}\r\n        />\r\n    </>\r\n}","export const contactsFilter = (arr: any) => {\r\n    return arr.filter((item: any, index:any, array:any) => {\r\n        // @ts-ignore\r\n        return index===array.findIndex(a => a.id === item.id)\r\n    })\r\n}","import {ContactType} from \"../Components/MainPage\";\r\nimport {contactsFilter} from \"./firlter\";\r\nimport {BaseThunkType, InferActionTypes} from \"./store\";\r\n\r\n\r\nconst CONTACTS_URL = 'http://localhost:3000/contacts/'\r\n\r\nexport type ItemPhoneType = {\r\n    id: string | number,\r\n    name: string,\r\n    number: string\r\n}\r\ntype ActionTypes = InferActionTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionTypes>\r\n\r\n\r\nconst initialState = {\r\n    contacts: {\r\n        items: [] as [] | Array<ItemPhoneType>,\r\n        filter: ''\r\n    },\r\n    error: null as null | string,\r\n}\r\ntype InitialStateType = typeof initialState\r\nexport const phoneReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_CONTACT\":\r\n            return {\r\n                ...state, contacts: {\r\n                    ...state.contacts,\r\n                    items: contactsFilter([...action.payload])\r\n                }\r\n            }\r\n\r\n        case \"DELETE_CONTACT\":\r\n            return {\r\n                ...state, contacts: {\r\n                    ...state.contacts,\r\n                    items: [...state.contacts.items.filter(item => item.id !== action.payload)]\r\n                }\r\n            }\r\n        case \"FILTER_CONTACT\":\r\n            return {...state, contacts: {...state.contacts, filter: action.payload}}\r\n        case   \"THROW_ERROR\": {\r\n            return {...state, error: action.payload}\r\n        }\r\n        case \"RESET_ERROR\": {\r\n            return {...state, error: null}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addContact(payload: Array<ItemPhoneType>) {\r\n        return ({type: 'ADD_CONTACT', payload} as const)\r\n    },\r\n    deleteContact(payload: number | string) {\r\n        return ({type: 'DELETE_CONTACT', payload} as const)\r\n    },\r\n    filterContact(payload: string) {\r\n        return ({type: 'FILTER_CONTACT', payload} as const)\r\n    },\r\n    throwError(payload: string) {\r\n        return ({type: 'THROW_ERROR', payload} as const)\r\n    },\r\n    resetError(){\r\n        return({type: 'RESET_ERROR'} as const)\r\n    }\r\n\r\n}\r\n\r\nexport const getDataContact = (): ThunkType => {\r\n    let error = ''\r\n    return (\r\n        async (dispatch) => {\r\n            try {\r\n                const response = await fetch(CONTACTS_URL)\r\n                if (!response.ok) {\r\n                    dispatch(actions.throwError('Response is not OK'))\r\n                    error = 'Response is not OK'\r\n                    throw new Error('Response is not OK')\r\n                }\r\n                const responseData = await response.json()\r\n                dispatch(actions.addContact(responseData))\r\n\r\n            } catch (e) {\r\n                error = e\r\n                dispatch(actions.throwError(e || 'Response is not OK'))\r\n            }\r\n            finally {\r\n                if (error){\r\n                    error = ''\r\n                    dispatch(actions.resetError())\r\n                }\r\n            }\r\n        }\r\n    )\r\n}\r\nexport const postContact = (data: ContactType): ThunkType => {\r\n    let error = ''\r\n    return (\r\n        async (dispatch) => {\r\n            try {\r\n                const response = await fetch(CONTACTS_URL, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(data)\r\n                })\r\n                if (!response.ok) {\r\n                    dispatch(actions.throwError('Response is not OK'))\r\n                    error = 'Response is not OK'\r\n                    throw new Error('Response is not OK')\r\n                }\r\n                dispatch(getDataContact())\r\n\r\n            } catch (e) {\r\n                error = e\r\n                dispatch(actions.throwError(e))\r\n            }\r\n            if (error){\r\n                error = ''\r\n                dispatch(actions.resetError())\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n\r\nexport const deletePost = (id: string | number):ThunkType=> {\r\n    let error = ''\r\n    return async (dispatch) => {\r\n        try {\r\n            const response =  await fetch(CONTACTS_URL + id, {\r\n                method: 'DELETE',\r\n            })\r\n            if (!response.ok) {\r\n                dispatch(actions.throwError('Response is not OK'))\r\n                error = 'Response is not OK'\r\n                throw new Error('Response is not OK')\r\n            }\r\n            dispatch(getDataContact())\r\n\r\n        }catch (e) {\r\n            error = e\r\n            dispatch(actions.throwError(e))\r\n        }\r\n        if (error){\r\n            error = ''\r\n            dispatch(actions.resetError())\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React, {useEffect, useMemo, useState} from 'react'\r\nimport {Header} from \"./Header/Header\";\r\nimport {Form} from \"./From/From\";\r\nimport {ContactsPage} from './ContacstPage/ContactsPage';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/store\";\r\nimport {actions, deletePost, getDataContact,postContact} from \"../redux/phoneReducer\";\r\nimport {getContacts, getError, getFilter} from \"../redux/phoneSelectors/phoneSelectors\";\r\nimport Swal from 'sweetalert2'\r\n\r\nexport type ContactType = {\r\n    id: string | number,\r\n    name: string,\r\n    number: string,\r\n}\r\n\r\n\r\nexport type IState = {\r\n    name: string\r\n    number: string\r\n}\r\n\r\nexport const MainPage = () => {\r\n    const dispatch = useDispatch()\r\n    const contacts = useSelector((state: AppStateType) => getContacts(state))\r\n    const filter = useSelector((state: AppStateType) => getFilter(state))\r\n    const error = useSelector((state:AppStateType) => getError(state))\r\n\r\n    const [state, setState] = useState<IState>({\r\n        name: '',\r\n        number: ''\r\n    })\r\n    useEffect(() => {\r\n        dispatch(getDataContact())\r\n    },[])\r\n\r\n    useMemo(() => {\r\n        if (error){\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    },[error])\r\n\r\n    const onChangeName = (value: string) => {\r\n        setState(prevState => {\r\n            return {...prevState, name: value}\r\n        })\r\n    }\r\n    const onChangePhone = (value: string) => {\r\n        setState(preState => {\r\n            return {...preState, number: value}\r\n        })\r\n    }\r\n    const onChangeFilter = (value: string) => {\r\n        dispatch(actions.filterContact(value))\r\n    }\r\n    const onSubmitForm =  (data: ContactType) => {\r\n        dispatch(postContact(data))\r\n\r\n    }\r\n    const onDeleteContact = (id: string | number) => {\r\n        dispatch(deletePost(id))\r\n\r\n    }\r\n    const onCheckContactList = (name: string) => {\r\n        return (contacts.find(item => item.name === name))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header text='PhoneBook'/>\r\n            <Form\r\n                onCheckContactList={onCheckContactList}\r\n                onSubmitForm={onSubmitForm}\r\n                name={state.name}\r\n                phone={state.number}\r\n                onChangeName={onChangeName}\r\n                onChangePhone={onChangePhone}\r\n            />\r\n            <ContactsPage\r\n                onChangeFilter={onChangeFilter}\r\n                contacts={contacts}\r\n                onDeleteContact={onDeleteContact}\r\n                filter={filter}\r\n            />\r\n        </>\r\n    )\r\n\r\n}","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport {MainPage} from \"./Components/MainPage\";\n\n\nexport const App = ()  => {\n  return (\n      <>\n        <CssBaseline />\n        <Container fixed>\n          <Typography\n              component=\"div\"\n              style={{ backgroundColor: '#cfe8fc', minHeight: '100vh' }}\n              children={\n                <MainPage/>\n              }\n          />\n        </Container>\n      </>\n  );\n}","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {phoneReducer} from \"./phoneReducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n  phone: phoneReducer\r\n})\r\n\r\n\r\n\r\ntype RootReducer = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducer>\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> =  ThunkAction<R, AppStateType, unknown, A>\r\nexport type InferActionTypes<T> = T extends {[key: string]: (...arg:any[]) => infer U } ? U: never\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)\r\n));\r\n\r\nexport type MainStateType  = typeof store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}